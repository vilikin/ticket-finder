{"version":3,"sources":["utils/gmail-client.js","config.js","components/Ticket.js","utils/helpers.js","core/ticket-core.js","components/TicketList.js","components/App.js","serviceWorker.js","index.js"],"names":["gmailClient","config","DISCOVERY_DOCS","GmailClient","_this","this","Object","classCallCheck","initClient","asyncToGenerator","regenerator_default","a","mark","_callee","isInitiallyAuthorized","wrap","_context","prev","next","gapi","client","init","apiKey","clientId","discoveryDocs","scope","auth2","getAuthInstance","isSignedIn","listen","updateAuthStatus","get","stop","authorized","callAuthStatusListeners","_","authStatusListeners","_ref2","callback","signIn","signOut","addAuthStatusListener","listener","id","push","removeAuthStatusListener","isAuthorized","load","getTime","date","moment","format","Ticket","_this$props","props","onClick","tripStartDate","tripEndDate","tripStartLocation","tripEndLocation","train","wagon","seat","react_default","createElement","Pane","display","flexDirection","elevation","padding","margin","borderBottom","flex","alignItems","justifyContent","Text","fontWeight","size","Icon","icon","color","Component","getTextBetween","full","start","end","splitStartIndex","arguments","length","undefined","split","timeAndDateStringsToMoment","timeString","dateString","combinedString","concat","add","assertGapiAuthenticated","Error","getMessage","_callee2","response","parsedMessage","_context2","gmail","users","messages","userId","sent","parseMessage","result","abrupt","_callee3","messageId","attachmentId","base64Image","_context3","attachments","base64url","toBase64","data","_ref","messageIds","currentMessageIndex","foundMostRelevantTicket","message","ticket","ticketWithAttachmentId","awaitAsyncGenerator","list","q","map","slice","value","console","log","messageHtmlToTicketObject","textHtml","objectSpread","inline","t0","error","messageHtml","from","time","location","parseFrom","to","parseTo","dateRaw","startDate","endDate","type","WrappedComponent","ticket_core","findMostRelevantTickets","getQrCodeDataURI","TicketList","state","loading","tickets","showingQrCode","qrCodeDataURI","showQrCodeDialog","setState","ticketCore","closeQrCodeDialog","fetchTickets","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","_value","asyncIterator","done","toConsumableArray","return","finish","t1","_this2","_this$state","height","Spinner","Ticket_Ticket","Dialog","isShown","title","onCloseComplete","hasFooter","src","alt","width","withGmailClient","background","Heading","Button","intent","appearance","TicketList_TicketList","marginTop","marginX","align","_React$Component","WithGmailWrapper","possibleConstructorReturn","getPrototypeOf","call","inherits","createClass","key","React","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","components_App","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","e","prompt"],"mappings":"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","file":"static/js/main.63cb0ea5.chunk.js","sourcesContent":["/* global gapi */\nimport React from 'react';\nimport * as _ from 'lodash';\nimport config from '../config';\n\n// Array of API discovery doc URLs for APIs used by the quickstart\nvar DISCOVERY_DOCS = [\"https://www.googleapis.com/discovery/v1/apis/gmail/v1/rest\"];\n\n// Authorization scopes required by the API; multiple scopes can be\n// included, separated by spaces.\nvar SCOPES = 'https://www.googleapis.com/auth/gmail.readonly';\n\nlet gmailClient;\n\n// makes sure that GmailClient stays as a sigleton\nexport function getGmailClient() {\n  if (!gmailClient) {\n    gmailClient = new GmailClient();\n  }\n\n  return gmailClient;\n}\n\nclass GmailClient {\n  constructor() {\n    this.authStatusListeners = [];\n    this.authorized = false;\n\n    gapi.load('client:auth2', this.initClient);\n  }\n\n  initClient = async () => {\n    await gapi.client.init({\n      apiKey: config.GOOGLE_API_KEY,\n      clientId: config.GOOGLE_CLIENT_ID,\n      discoveryDocs: DISCOVERY_DOCS,\n      scope: SCOPES,\n    });\n\n    gapi.auth2.getAuthInstance().isSignedIn.listen(this.updateAuthStatus);\n  \n    const isInitiallyAuthorized = gapi.auth2.getAuthInstance().isSignedIn.get();\n    this.updateAuthStatus(isInitiallyAuthorized);\n  }\n\n  updateAuthStatus = (authorized) => {\n    this.authorized = authorized;\n\n    this.callAuthStatusListeners(authorized);\n  }\n\n  callAuthStatusListeners = (authorized) => {\n    _.forEach(this.authStatusListeners, ({ callback }) => callback(authorized));\n  }\n\n  signIn = () => {\n    gapi.auth2.getAuthInstance().signIn();\n  }\n\n  signOut = () => {\n    gapi.auth2.getAuthInstance().signOut();\n  }\n\n  addAuthStatusListener = (callback) => {\n    const listener = {\n      id: _.uniqueId(),\n      callback,\n    };\n\n    this.authStatusListeners.push(listener);\n\n    return listener.id;\n  }\n\n  removeAuthStatusListener = (id) => {\n    this.authStatusListeners = _.reject(this.authStatusListeners, { id });\n  }\n\n  isAuthorized = () => {\n    return this.authorized;\n  }\n}\n\nexport function withGmailClient(WrappedComponent) {\n  return class WithGmailWrapper extends React.Component {\n    constructor(props) {\n      super(props);\n\n      this.gmailClient = getGmailClient();\n\n      this.state = {\n        authorized: this.gmailClient.isAuthorized(),\n      };\n\n      this.gmailClient.addAuthStatusListener((authorized) => {\n        this.setState({\n          authorized,\n        });\n      });\n    }\n\n    render() {\n      return (\n        <WrappedComponent client={this.gmailClient}\n                          authorized={this.state.authorized}\n        />\n      );\n    }\n  }\n}\n","export default {\n  GOOGLE_CLIENT_ID: '917849568600-tsfpk9a7ime5mp05mbi2m50pa6dmdvdv.apps.googleusercontent.com',\n  GOOGLE_API_KEY: 'AIzaSyC8wpPEEB_lJHis-t6yGkwespbyriKEUas',\n};\n","import React, { Component } from 'react';\nimport { Pane, Text, Icon } from 'evergreen-ui';\nimport * as moment from 'moment';\n\nfunction getTime(date) {\n  return moment(date).format('HH:mm');\n}\n\nfunction getDate(date) {\n  return moment(date).format('DD.MM.YYYY');\n}\n\nexport default class Ticket extends Component {\n  render() {\n    const {\n      onClick,\n      tripStartDate,\n      tripEndDate,\n      tripStartLocation,\n      tripEndLocation,\n      train,\n      wagon,\n      seat,\n    } = this.props;\n\n    return (\n      <Pane onClick={onClick} display=\"flex\" flexDirection=\"row\" elevation=\"1\" padding={8} margin={12} borderBottom='3px solid #47B881'>\n        <Pane display=\"flex\" flex={1} alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\n          <Text fontWeight=\"bold\">{tripStartLocation}</Text>\n          <Text size={500}>{getTime(tripStartDate)}</Text>\n        </Pane>\n        <Pane display=\"flex\" flex={1} alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\n          <Text margin={4}>{getDate(tripStartDate)}</Text>\n          <Icon margin={4} icon=\"train\" color='#00783E'/>\n          <Text margin={4}>{train} / {wagon} / {seat}</Text>\n        </Pane>\n        <Pane display=\"flex\" flex={1} alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\n          <Text fontWeight=\"bold\">{tripEndLocation}</Text>\n          <Text size={500}>{getTime(tripEndDate)}</Text>\n        </Pane>\n      </Pane>\n    );\n  }\n}\n","import * as moment from 'moment';\n\nexport function getTextBetween(full, start, end, splitStartIndex = 1) {\n  return full.split(start)[splitStartIndex].split(end)[0];\n}\n\nexport function timeAndDateStringsToMoment(timeString, dateString) {\n  const dateFormat = 'DD.MM.YYYY HH:mm'\n  const combinedString = `${dateString} ${timeString}`;\n  return moment(combinedString, dateFormat).add(3, 'hours');\n}","/* global gapi */\n\nimport * as _ from 'lodash';\nimport * as parseMessage from 'gmail-api-parse-message';\nimport {\n  getTextBetween,\n  timeAndDateStringsToMoment,\n} from '../utils/helpers';\n\nimport base64url from 'base64url';\n\nfunction assertGapiAuthenticated() {\n  if (gapi.auth2.getAuthInstance().isSignedIn.get() === false) {\n    throw new Error('Google API not authenticated');\n  }\n}\n\nasync function getMessage(id) {\n  const response = await gapi.client.gmail.users.messages.get({\n    'userId': 'me',\n    'id': id,\n  });\n\n  const parsedMessage = parseMessage(response.result);\n  return parsedMessage;\n}\n\nasync function getQrCodeDataURI(messageId, attachmentId) {\n  const { result } = await gapi.client.gmail.users.messages.attachments.get({\n    'userId': 'me',\n    'id': attachmentId,\n    'messageId': messageId,\n  });\n\n  // Gmail API gives us a Base64_urlencoded image\n  // We need to convert it to normal Base64 for data URI\n  const base64Image = base64url.toBase64(result.data);\n  return `data:image/png;base64,${base64Image}`;\n}\n\nasync function* findMostRelevantTickets() {\n  assertGapiAuthenticated();\n  \n  const { result: { messages } } = await gapi.client.gmail.users.messages.list({\n    'userId': 'me',\n    'q': 'Matkalippu from:tickets@vr.fi',\n  });\n\n  const messageIds = _.chain(messages)\n    .map('id')\n    .slice(0, 4)\n    .value();\n\n  console.log(messageIds);\n\n  let stopOnNextNonRelevantTicket = false;\n  let currentMessageIndex = 0;\n  let foundMostRelevantTicket = false;\n  \n  while (!foundMostRelevantTicket && currentMessageIndex < messageIds.length) {\n    try {\n      const messageId = messageIds[currentMessageIndex];\n      const message = await getMessage(messageId);\n\n      const ticket = messageHtmlToTicketObject(message.textHtml);\n      const ticketWithAttachmentId = {\n        ...ticket,\n        messageId,\n        attachmentId: _.first(message.inline).attachmentId,\n      };\n\n      yield ticketWithAttachmentId;\n    } catch (err) {\n      console.error(`Failed to parse message`, err);\n    }\n\n    currentMessageIndex += 1;\n  }\n}\n\nfunction messageHtmlToTicketObject(messageHtml) {\n  const from = parseFrom(messageHtml);\n  const to = parseTo(messageHtml);\n  const dateRaw = getTextBetween(messageHtml,\n      '<span style=\"color:#077f00;\">', '</span>', 2);\n  \n  const startDate = timeAndDateStringsToMoment(from.time, dateRaw);\n  const endDate = timeAndDateStringsToMoment(to.time, dateRaw);\n  \n  const train = getTextBetween(messageHtml,\n      '<span style=\"font-size:14px;line-height:1.5;\">', ',');\n  const wagon = getTextBetween(messageHtml,\n      '<b style=\"font-size:24px;line-height:1.5;color:#077f00;\">', ' </b>');\n  const seat = getTextBetween(messageHtml,\n      '<b style=\"font-size:24px;line-height:1.5;color:#077f00;\">', ' </b>', 2);\n  const type = getTextBetween(messageHtml,\n      '<span style=\"font-size:16px;\">', '</span>', 2);\n\n  return {\n    from: from.location,\n    to: to.location,\n    startDate,\n    endDate,\n    train,\n    wagon,\n    seat,\n    type,\n  };\n}\n\nfunction parseFrom(messageHtml) {\n  const full = getTextBetween(\n    messageHtml,\n    '<td width=\"90%\" valign=\"top\" style=\"color:#4F5D5D;line-height:1.2;\" rowspan=\"1\" colspan=\"1\">',\n    '</td>',\n  );\n  \n  const time = getTextBetween(full, '<span style=\"font-size:16px;\">', ' </span>');\n  const location = getTextBetween(full, '<b style=\"font-size:16px;\">', ' →</b>');\n\n  return {\n    time,\n    location,\n  };\n}\n\nfunction parseTo(messageHtml) {\n  const full = getTextBetween(\n    messageHtml,\n    '<td width=\"90%\" style=\"color:#4F5D5D;padding-top:5px;\" rowspan=\"1\" colspan=\"1\">',\n    '</td>',\n  );\n  \n  const time = getTextBetween(full, '<span style=\"font-size:16px;line-height:1.2;\">', ' </span>');\n  const location = getTextBetween(full, '<b style=\"font-size:16px;line-height:1.2;\">', '</b>');\n\n  return {\n    time,\n    location,\n  };\n}\n\nexport default {\n  findMostRelevantTickets,\n  getQrCodeDataURI,\n}","/* global gapi */\nimport React, { Component } from 'react';\nimport { Pane, Spinner, Dialog } from 'evergreen-ui';\nimport Ticket from './Ticket';\nimport ticketCore from '../core/ticket-core';\n\nexport default class TicketList extends Component {\n  state = {\n    loading: true,\n    error: null,\n    tickets: [],\n    showingQrCode: false,\n    qrCodeDataURI: null,\n  };\n\n  showQrCodeDialog = async (ticket) => {\n    this.setState({\n      showingQrCode: true,\n    });\n\n    const qrCodeDataURI = await ticketCore.getQrCodeDataURI(ticket.messageId, ticket.attachmentId);\n\n    this.setState({\n      qrCodeDataURI,\n    });\n  }\n\n  closeQrCodeDialog = async () => {\n    this.setState({\n      showingQrCode: false,\n      qrCodeDataURI: null,\n    });\n  }\n\n  fetchTickets = async () => {\n    this.setState({\n      loading: true,\n      error: null,\n    });\n\n    try {\n      for await (const ticket of ticketCore.findMostRelevantTickets()) {\n        this.setState({\n          tickets: [ ...this.state.tickets, ticket],\n          loading: false,\n          error: null,\n        });\n      }\n    } catch (error) {\n      this.setState({\n        error,\n        loading: false,\n      });\n    }\n  }\n\n  async componentDidMount() {\n    await this.fetchTickets();\n  }\n\n  render() {\n    const {\n      loading,\n      error,\n      tickets,\n      showingQrCode,\n      qrCodeDataURI,\n    } = this.state;\n\n    if (loading) {\n      return (\n        <Pane display=\"flex\" alignItems=\"center\" justifyContent=\"center\" height=\"90vh\">\n          <Spinner />\n        </Pane>\n      );\n    }\n\n    if (error) {\n      return <Pane>Error</Pane>;\n    }\n\n    return (\n      <Pane padding={8}>\n        {\n          tickets.map(ticket => (\n            <Ticket tripStartDate={ticket.startDate}\n                    tripStartLocation={ticket.from}\n                    tripEndDate={ticket.endDate}\n                    tripEndLocation={ticket.to}\n                    train={ticket.train}\n                    wagon={ticket.wagon}\n                    seat={ticket.seat}\n                    onClick={() => this.showQrCodeDialog({\n                      attachmentId: ticket.attachmentId,\n                      messageId: ticket.messageId,\n                    })}\n            />\n          ))\n        }\n        <Dialog\n          isShown={showingQrCode}\n          title=\"Tampere - Tikkurila\"\n          onCloseComplete={this.closeQrCodeDialog}\n          hasFooter={false}\n        >\n          <Pane display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n            {\n              qrCodeDataURI &&\n                <img src={qrCodeDataURI} alt=\"QR code\" height={150} width={150} />\n            }\n          </Pane>\n        </Dialog>\n      </Pane>\n    );\n  }\n}\n","import React from 'react';\nimport {\n  Heading,\n  Pane,\n  Button,\n  Icon,\n  Text,\n} from 'evergreen-ui';\n\nimport { withGmailClient } from '../utils/gmail-client';\nimport TicketList from './TicketList';\n\nconst App = (props) => (\n  <Pane>\n    <Pane display=\"flex\" padding={16} background=\"greenTint\">\n      <Pane flex={1} alignItems=\"center\" display=\"flex\">\n        <Heading size={600}>Tickets</Heading>\n      </Pane>\n    \n      {\n        props.authorized ?\n          <Button onClick={props.client.signOut}>Sign out</Button>\n          :\n          <Button intent=\"success\" appearance=\"primary\" onClick={props.client.signIn}>\n            Sign in\n          </Button>\n      }\n\n    </Pane>\n\n      {\n          props.authorized\n          ? <TicketList />\n          : <Pane\n              display=\"flex\"\n              alignItems=\"center\"\n              justifyContent=\"center\"\n              flexDirection=\"column\"\n              height=\"calc(100vh - 64px)\"\n            >\n              <Icon icon=\"train\" size={60} color=\"success\"/>\n              <Text size={30} color=\"muted\" marginTop={16} marginX={30} align=\"center\">\n                Welcome to Ticket Finder!\n              </Text>\n              <Text size={30} color=\"muted\" marginTop={16} marginX={30} align=\"center\">\n                Sign in with your Google account to find train tickets from your Gmail Inbox.\n              </Text>\n            </Pane>\n      }\n  </Pane>\n)\n\nexport default withGmailClient(App);\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n\nwindow.addEventListener('beforeinstallprompt', (e) => {\n  e.prompt();\n});\n"],"sourceRoot":""}