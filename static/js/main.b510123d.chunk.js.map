{"version":3,"sources":["config.js","components/Ticket/Ticket.js","utils/helpers.js","core/ticket-core.js","components/TicketFinder/TicketFinder.js","components/App/App.js","serviceWorker.js","index.js"],"names":["config","getTime","date","moment","format","Ticket","_this$props","this","props","onClick","tripStartDate","tripEndDate","tripStartLocation","tripEndLocation","train","wagon","seat","react_default","a","createElement","Pane","display","flexDirection","elevation","padding","margin","borderBottom","flex","alignItems","justifyContent","Text","fontWeight","size","Icon","icon","color","Component","getTextBetween","full","start","end","splitStartIndex","arguments","length","undefined","split","timeAndDateStringsToMoment","timeString","dateString","combinedString","concat","add","assertGapiAuthenticated","gapi","auth2","getAuthInstance","isSignedIn","get","Error","getMessage","_callee2","id","response","parsedMessage","regenerator_default","wrap","_context2","prev","next","client","gmail","users","messages","userId","sent","parseMessage","result","abrupt","stop","_callee3","messageId","attachmentId","_ref2","base64Image","_context3","attachments","base64url","toBase64","data","_callee","_ref","messageIds","currentMessageIndex","foundMostRelevantTicket","message","ticket","ticketWithAttachmentId","_context","Object","awaitAsyncGenerator","list","q","_","map","slice","value","console","log","messageHtmlToTicketObject","textHtml","objectSpread","inline","t0","error","messageHtml","from","time","location","parseFrom","to","parseTo","dateRaw","startDate","endDate","type","ticket_core","findMostRelevantTickets","getQrCodeDataURI","TicketFinder","state","loading","tickets","showingQrCode","qrCodeDataURI","showQrCodeDialog","_this","setState","ticketCore","closeQrCodeDialog","fetchTickets","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","_value","asyncIterator","done","toConsumableArray","return","finish","t1","_this2","_this$state","height","Spinner","Ticket_Ticket","Dialog","isShown","title","onCloseComplete","hasFooter","src","alt","width","CLIENT_ID","API_KEY","DISCOVERY_DOCS","SCOPES","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","initClient","asyncToGenerator","mark","init","apiKey","clientId","discoveryDocs","scope","listen","updateSigninStatus","_x","apply","handleAuthClick","event","signIn","handleSignoutClick","signOut","load","background","Heading","Button","intent","appearance","TicketFinder_TicketFinder","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","components_App_App","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","e","prompt"],"mappings":"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","file":"static/js/main.b510123d.chunk.js","sourcesContent":["export default {\n  GOOGLE_CLIENT_ID: '917849568600-tsfpk9a7ime5mp05mbi2m50pa6dmdvdv.apps.googleusercontent.com',\n  GOOGLE_API_KEY: 'AIzaSyC8wpPEEB_lJHis-t6yGkwespbyriKEUas',\n};\n","import React, { Component } from 'react';\nimport { Pane, Text, Icon } from 'evergreen-ui';\nimport * as moment from 'moment';\n\nfunction getTime(date) {\n  return moment(date).format('HH:mm');\n}\n\nfunction getDate(date) {\n  return moment(date).format('DD.MM.YYYY');\n}\n\nexport default class Ticket extends Component {\n  render() {\n    const {\n      onClick,\n      tripStartDate,\n      tripEndDate,\n      tripStartLocation,\n      tripEndLocation,\n      train,\n      wagon,\n      seat,\n    } = this.props;\n\n    return (\n      <Pane onClick={onClick} display=\"flex\" flexDirection=\"row\" elevation=\"1\" padding={8} margin={12} borderBottom='3px solid #47B881'>\n        <Pane display=\"flex\" flex={1} alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\n          <Text fontWeight=\"bold\">{tripStartLocation}</Text>\n          <Text size={500}>{getTime(tripStartDate)}</Text>\n        </Pane>\n        <Pane display=\"flex\" flex={1} alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\n          <Text margin={4}>{getDate(tripStartDate)}</Text>\n          <Icon margin={4} icon=\"train\" color='#00783E'/>\n          <Text margin={4}>{train} / {wagon} / {seat}</Text>\n        </Pane>\n        <Pane display=\"flex\" flex={1} alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\n          <Text fontWeight=\"bold\">{tripEndLocation}</Text>\n          <Text size={500}>{getTime(tripEndDate)}</Text>\n        </Pane>\n      </Pane>\n    );\n  }\n}\n","import * as moment from 'moment';\n\nexport function getTextBetween(full, start, end, splitStartIndex = 1) {\n  return full.split(start)[splitStartIndex].split(end)[0];\n}\n\nexport function timeAndDateStringsToMoment(timeString, dateString) {\n  const dateFormat = 'DD.MM.YYYY HH:mm'\n  const combinedString = `${dateString} ${timeString}`;\n  return moment(combinedString, dateFormat).add(3, 'hours');\n}","/* global gapi */\n\nimport * as _ from 'lodash';\nimport * as parseMessage from 'gmail-api-parse-message';\nimport {\n  getTextBetween,\n  timeAndDateStringsToMoment,\n} from '../utils/helpers';\n\nimport base64url from 'base64url';\n\nfunction assertGapiAuthenticated() {\n  if (gapi.auth2.getAuthInstance().isSignedIn.get() === false) {\n    throw new Error('Google API not authenticated');\n  }\n}\n\nasync function getMessage(id) {\n  const response = await gapi.client.gmail.users.messages.get({\n    'userId': 'me',\n    'id': id,\n  });\n\n  const parsedMessage = parseMessage(response.result);\n  return parsedMessage;\n}\n\nasync function getQrCodeDataURI(messageId, attachmentId) {\n  const { result } = await gapi.client.gmail.users.messages.attachments.get({\n    'userId': 'me',\n    'id': attachmentId,\n    'messageId': messageId,\n  });\n\n  // Gmail API gives us a Base64_urlencoded image\n  // We need to convert it to normal Base64 for data URI\n  const base64Image = base64url.toBase64(result.data);\n  return `data:image/png;base64,${base64Image}`;\n}\n\nasync function* findMostRelevantTickets() {\n  assertGapiAuthenticated();\n  \n  const { result: { messages } } = await gapi.client.gmail.users.messages.list({\n    'userId': 'me',\n    'q': 'Matkalippu from:tickets@vr.fi',\n  });\n\n  const messageIds = _.chain(messages)\n    .map('id')\n    .slice(0, 4)\n    .value();\n\n  console.log(messageIds);\n\n  let stopOnNextNonRelevantTicket = false;\n  let currentMessageIndex = 0;\n  let foundMostRelevantTicket = false;\n  \n  while (!foundMostRelevantTicket && currentMessageIndex < messageIds.length) {\n    try {\n      const messageId = messageIds[currentMessageIndex];\n      const message = await getMessage(messageId);\n\n      const ticket = messageHtmlToTicketObject(message.textHtml);\n      const ticketWithAttachmentId = {\n        ...ticket,\n        messageId,\n        attachmentId: _.first(message.inline).attachmentId,\n      };\n\n      yield ticketWithAttachmentId;\n    } catch (err) {\n      console.error(`Failed to parse message`, err);\n    }\n\n    currentMessageIndex += 1;\n  }\n}\n\nfunction messageHtmlToTicketObject(messageHtml) {\n  const from = parseFrom(messageHtml);\n  const to = parseTo(messageHtml);\n  const dateRaw = getTextBetween(messageHtml,\n      '<span style=\"color:#077f00;\">', '</span>', 2);\n  \n  const startDate = timeAndDateStringsToMoment(from.time, dateRaw);\n  const endDate = timeAndDateStringsToMoment(to.time, dateRaw);\n  \n  const train = getTextBetween(messageHtml,\n      '<span style=\"font-size:14px;line-height:1.5;\">', ',');\n  const wagon = getTextBetween(messageHtml,\n      '<b style=\"font-size:24px;line-height:1.5;color:#077f00;\">', ' </b>');\n  const seat = getTextBetween(messageHtml,\n      '<b style=\"font-size:24px;line-height:1.5;color:#077f00;\">', ' </b>', 2);\n  const type = getTextBetween(messageHtml,\n      '<span style=\"font-size:16px;\">', '</span>', 2);\n\n  return {\n    from: from.location,\n    to: to.location,\n    startDate,\n    endDate,\n    train,\n    wagon,\n    seat,\n    type,\n  };\n}\n\nfunction parseFrom(messageHtml) {\n  const full = getTextBetween(\n    messageHtml,\n    '<td width=\"90%\" valign=\"top\" style=\"color:#4F5D5D;line-height:1.2;\" rowspan=\"1\" colspan=\"1\">',\n    '</td>',\n  );\n  \n  const time = getTextBetween(full, '<span style=\"font-size:16px;\">', ' </span>');\n  const location = getTextBetween(full, '<b style=\"font-size:16px;\">', ' →</b>');\n\n  return {\n    time,\n    location,\n  };\n}\n\nfunction parseTo(messageHtml) {\n  const full = getTextBetween(\n    messageHtml,\n    '<td width=\"90%\" style=\"color:#4F5D5D;padding-top:5px;\" rowspan=\"1\" colspan=\"1\">',\n    '</td>',\n  );\n  \n  const time = getTextBetween(full, '<span style=\"font-size:16px;line-height:1.2;\">', ' </span>');\n  const location = getTextBetween(full, '<b style=\"font-size:16px;line-height:1.2;\">', '</b>');\n\n  return {\n    time,\n    location,\n  };\n}\n\nexport default {\n  findMostRelevantTickets,\n  getQrCodeDataURI,\n}","/* global gapi */\nimport React, { Component } from 'react';\nimport { Pane, Spinner, Dialog } from 'evergreen-ui';\nimport Ticket from '../Ticket/Ticket';\nimport ticketCore from './../../core/ticket-core';\n\nexport default class TicketFinder extends Component {\n  state = {\n    loading: true,\n    error: null,\n    tickets: [],\n    showingQrCode: false,\n    qrCodeDataURI: null,\n  }\n\n  showQrCodeDialog = async (ticket) => {\n    this.setState({\n      showingQrCode: true,\n    });\n\n    const qrCodeDataURI = await ticketCore.getQrCodeDataURI(ticket.messageId, ticket.attachmentId)\n\n    this.setState({\n      qrCodeDataURI,\n    });\n  }\n\n  closeQrCodeDialog = async () => {\n    this.setState({\n      showingQrCode: false,\n      qrCodeDataURI: null,\n    });\n  }\n\n  fetchTickets = async () => {\n    this.setState({\n      loading: true,\n      error: null,\n    });\n\n    try {\n      for await (const ticket of ticketCore.findMostRelevantTickets()) {\n        this.setState({\n          tickets: [ ...this.state.tickets, ticket],\n          loading: false,\n          error: null,\n        });\n      }\n    } catch (error) {\n      this.setState({\n        error,\n        loading: false,\n      });\n    }\n  }\n\n  async componentDidMount() {\n    await this.fetchTickets();\n  }\n\n  render() {\n    const {\n      loading,\n      error,\n      tickets,\n      showingQrCode,\n      qrCodeDataURI,\n    } = this.state;\n\n    if (loading) {\n      return (\n        <Pane display=\"flex\" alignItems=\"center\" justifyContent=\"center\" height=\"90vh\">\n          <Spinner />\n        </Pane>\n      );\n    }\n\n    if (error) {\n      return <Pane>Error</Pane>;\n    }\n\n    return (\n      <Pane padding={8}>\n        {\n          tickets.map(ticket => (\n            <Ticket tripStartDate={ticket.startDate}\n                    tripStartLocation={ticket.from}\n                    tripEndDate={ticket.endDate}\n                    tripEndLocation={ticket.to}\n                    train={ticket.train}\n                    wagon={ticket.wagon}\n                    seat={ticket.seat}\n                    onClick={() => this.showQrCodeDialog({\n                      attachmentId: ticket.attachmentId,\n                      messageId: ticket.messageId,\n                    })}\n            />\n          ))\n        }\n        <Dialog\n          isShown={showingQrCode}\n          title=\"Tampere - Tikkurila\"\n          onCloseComplete={this.closeQrCodeDialog}\n          hasFooter={false}\n        >\n          <Pane display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n            {\n              qrCodeDataURI &&\n                <img src={qrCodeDataURI} alt=\"QR code\" height={150} width={150} />\n            }\n          </Pane>\n        </Dialog>\n      </Pane>\n    );\n  }\n}\n","/*global gapi*/\nimport React, { Component } from 'react';\nimport {\n  Heading,\n  Pane,\n  Button,\n} from 'evergreen-ui';\n\nimport config from '../../config';\nimport TicketFinder from '../TicketFinder/TicketFinder';\n\n// Client ID and API key from the Developer Console\nvar CLIENT_ID = config.GOOGLE_CLIENT_ID;\nvar API_KEY = config.GOOGLE_API_KEY;\n\n// Array of API discovery doc URLs for APIs used by the quickstart\nvar DISCOVERY_DOCS = [\"https://www.googleapis.com/discovery/v1/apis/gmail/v1/rest\"];\n\n// Authorization scopes required by the API; multiple scopes can be\n// included, separated by spaces.\nvar SCOPES = 'https://www.googleapis.com/auth/gmail.readonly';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isSignedIn: false,\n    }\n\n    gapi.load('client:auth2', this.initClient);\n  }\n\n  initClient = async () => {\n    await gapi.client.init({\n      apiKey: API_KEY,\n      clientId: CLIENT_ID,\n      discoveryDocs: DISCOVERY_DOCS,\n      scope: SCOPES\n    });\n\n    // Listen for sign-in state changes.\n    gapi.auth2.getAuthInstance().isSignedIn.listen(this.updateSigninStatus);\n  \n    // Handle the initial sign-in state.\n    this.updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());\n  }\n\n  updateSigninStatus = async (isSignedIn) => {\n    this.setState({\n      isSignedIn,\n    });\n  }\n\n  handleAuthClick = (event) => {\n    gapi.auth2.getAuthInstance().signIn();\n  }\n\n  handleSignoutClick = (event) => {\n    gapi.auth2.getAuthInstance().signOut();\n  }\n\n  render() {\n    const { isSignedIn } = this.state;\n\n    return (\n      <Pane>\n        <Pane display=\"flex\" padding={16} background=\"greenTint\">\n          <Pane flex={1} alignItems=\"center\" display=\"flex\">\n            <Heading size={600}>Tickets</Heading>\n          </Pane>\n        \n          {\n            isSignedIn ?\n            <Button onClick={this.handleSignoutClick}>Sign out</Button>\n            :\n            <Button intent=\"success\" appearance=\"primary\" onClick={this.handleAuthClick}>Sign in</Button>\n          }\n        </Pane>\n\n        {\n           isSignedIn && <TicketFinder/>\n        }\n      </Pane>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n\nwindow.addEventListener('beforeinstallprompt', (e) => {\n  e.prompt();\n});\n"],"sourceRoot":""}